{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-auth.service\";\nexport class UserService {\n  constructor(httpClient, userAuthService) {\n    this.httpClient = httpClient;\n    this.userAuthService = userAuthService;\n    this.PATH_OF_API = \"http://localhost:9090\";\n    this.requestHeader = new HttpHeaders().set('No-Auth', 'True');\n  }\n  login(loginData) {\n    return this.httpClient.post(this.PATH_OF_API + \"/authenticate\", loginData, {\n      headers: this.requestHeader\n    });\n  }\n  roleMatch(allowedRoles) {\n    const userRoles = this.userAuthService.getRoles();\n    if (userRoles && userRoles.length > 0) {\n      for (let i = 0; i < userRoles.length; i++) {\n        for (let j = 0; j < allowedRoles.length; j++) {\n          if (userRoles[i].roleName === allowedRoles[j]) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","UserService","constructor","httpClient","userAuthService","PATH_OF_API","requestHeader","set","login","loginData","post","headers","roleMatch","allowedRoles","userRoles","getRoles","length","i","j","roleName","i0","ɵɵinject","i1","HttpClient","i2","UserAuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\vinod\\OneDrive\\Desktop\\Angular_Project\\jwt_ui\\src\\app\\_services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { UserAuthService } from './user-auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  PATH_OF_API = \"http://localhost:9090\";\n  requestHeader: HttpHeaders = new HttpHeaders().set('No-Auth', 'True');\n\n  constructor(private httpClient: HttpClient, private userAuthService : UserAuthService) { }\n\n  public login(loginData: any) {\n    return this.httpClient.post(this.PATH_OF_API + \"/authenticate\", loginData, { headers: this.requestHeader });\n  }\n\n  public roleMatch(allowedRoles: string[]): boolean {\n    const userRoles = this.userAuthService.getRoles();\n    if (userRoles && userRoles.length > 0) {\n      for (let i = 0; i < userRoles.length; i++) {\n        for (let j = 0; j < allowedRoles.length; j++) {\n          if (userRoles[i].roleName === allowedRoles[j]) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  \n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAO9D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,UAAsB,EAAUC,eAAiC;IAAjE,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,eAAe,GAAfA,eAAe;IAHnE,KAAAC,WAAW,GAAG,uBAAuB;IACrC,KAAAC,aAAa,GAAgB,IAAIN,WAAW,EAAE,CAACO,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC;EAEoB;EAElFC,KAAKA,CAACC,SAAc;IACzB,OAAO,IAAI,CAACN,UAAU,CAACO,IAAI,CAAC,IAAI,CAACL,WAAW,GAAG,eAAe,EAAEI,SAAS,EAAE;MAAEE,OAAO,EAAE,IAAI,CAACL;IAAa,CAAE,CAAC;EAC7G;EAEOM,SAASA,CAACC,YAAsB;IACrC,MAAMC,SAAS,GAAG,IAAI,CAACV,eAAe,CAACW,QAAQ,EAAE;IACjD,IAAID,SAAS,IAAIA,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;MACrC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;QACzC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,YAAY,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAE;UAC5C,IAAIJ,SAAS,CAACG,CAAC,CAAC,CAACE,QAAQ,KAAKN,YAAY,CAACK,CAAC,CAAC,EAAE;YAC7C,OAAO,IAAI;;;;;IAKnB,OAAO,KAAK;EACd;;AAvBWjB,WAAW,C;mBAAXA,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,eAAA;AAAA;AAAXxB,WAAW,C;SAAXA,WAAW;EAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}