{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nexport let UserService = class UserService {\n  constructor(httpClient, userAuthService) {\n    this.httpClient = httpClient;\n    this.userAuthService = userAuthService;\n    this.PATH_OF_API = \"http://localhost:9090\";\n    this.requestHeader = new HttpHeaders().set('No-Auth', 'True');\n  }\n  login(loginData) {\n    return this.httpClient.post(this.PATH_OF_API + \"/authenticate\", loginData, {\n      headers: this.requestHeader\n    });\n  }\n  roleMatch(allowedRoles) {\n    let isMatch = false;\n    const userRoles = this.userAuthService.getRole();\n    if (userRoles != null && userRoles) {\n      for (let i = 0; i < userRoles.length; i++) {\n        for (let j = 0; j < allowedRoles.length; j++) {\n          if (userRoles[i].roleName == allowedRoles[j]) {\n            isMatch = true;\n            return isMatch;\n          }\n        }\n      }\n    }\n    return isMatch;\n  }\n};\nUserService = __decorate([Injectable({\n  providedIn: 'root'\n})], UserService);","map":{"version":3,"names":["HttpHeaders","Injectable","UserService","constructor","httpClient","userAuthService","PATH_OF_API","requestHeader","set","login","loginData","post","headers","roleMatch","allowedRoles","isMatch","userRoles","getRole","i","length","j","roleName","__decorate","providedIn"],"sources":["C:\\Users\\vinod\\OneDrive\\Desktop\\Angular_Project\\jwt_ui\\src\\app\\_services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  PATH_OF_API = \"http://localhost:9090\";\n  requestHeader: HttpHeaders = new HttpHeaders().set('No-Auth', 'True');\n\n  constructor(private httpClient: HttpClient, private userAuthService : UserAuthService) { }\n\n  public login(loginData: any) {\n    return this.httpClient.post(this.PATH_OF_API + \"/authenticate\", loginData, { headers: this.requestHeader });\n  }\n\n  public roleMatch(allowedRoles: string[]): boolean {\n    let isMatch = false;\n    const userRoles = this.userAuthService.getRole();\n    if (userRoles != null && userRoles) {\n      for (let i = 0; i < userRoles.length; i++) {\n        for (let j = 0; j < allowedRoles.length; j++) {\n          if (userRoles[i].roleName == allowedRoles[j]) {\n            isMatch = true;\n            return isMatch;\n          }\n        }\n      }\n    }\n    return isMatch;\n  }\n  \n}\n"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,QAAQ,eAAe;AAKnC,WAAMC,WAAW,GAAjB,MAAMA,WAAW;EAKtBC,YAAoBC,UAAsB,EAAUC,eAAiC;IAAjE,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,eAAe,GAAfA,eAAe;IAHnE,KAAAC,WAAW,GAAG,uBAAuB;IACrC,KAAAC,aAAa,GAAgB,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC;EAEoB;EAElFC,KAAKA,CAACC,SAAc;IACzB,OAAO,IAAI,CAACN,UAAU,CAACO,IAAI,CAAC,IAAI,CAACL,WAAW,GAAG,eAAe,EAAEI,SAAS,EAAE;MAAEE,OAAO,EAAE,IAAI,CAACL;IAAa,CAAE,CAAC;EAC7G;EAEOM,SAASA,CAACC,YAAsB;IACrC,IAAIC,OAAO,GAAG,KAAK;IACnB,MAAMC,SAAS,GAAG,IAAI,CAACX,eAAe,CAACY,OAAO,EAAE;IAChD,IAAID,SAAS,IAAI,IAAI,IAAIA,SAAS,EAAE;MAClC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;UAC5C,IAAIJ,SAAS,CAACE,CAAC,CAAC,CAACG,QAAQ,IAAIP,YAAY,CAACM,CAAC,CAAC,EAAE;YAC5CL,OAAO,GAAG,IAAI;YACd,OAAOA,OAAO;;;;;IAKtB,OAAOA,OAAO;EAChB;CAED;AA3BYb,WAAW,GAAAoB,UAAA,EAHvBrB,UAAU,CAAC;EACVsB,UAAU,EAAE;CACb,CAAC,C,EACWrB,WAAW,CA2BvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}