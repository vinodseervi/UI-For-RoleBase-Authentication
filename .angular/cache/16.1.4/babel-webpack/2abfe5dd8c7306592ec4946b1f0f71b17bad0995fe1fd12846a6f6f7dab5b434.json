{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/user-auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../_services/user.service\";\nexport class AuthGuard {\n  constructor(userAuthService, router, userService) {\n    this.userAuthService = userAuthService;\n    this.router = router;\n    this.userService = userService;\n  }\n  canActivate(route, state) {\n    if (this.userAuthService.getToken() !== null) {\n      const role = route.data['roles'];\n      console.log(role);\n      if (role) {\n        const match = this.userService.roleMatch(role);\n        if (match) {\n          return true;\n        } else {\n          this.router.navigate(['/forbidden']);\n          return false;\n        }\n      }\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.UserAuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.UserService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","userAuthService","router","userService","canActivate","route","state","getToken","role","data","console","log","match","roleMatch","navigate","i0","ɵɵinject","i1","UserAuthService","i2","Router","i3","UserService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\vinod\\OneDrive\\Desktop\\Angular_Project\\jwt_ui\\src\\app\\_auth\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserAuthService } from '../_services/user-auth.service';\nimport { UserService } from '../_services/user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private userAuthService: UserAuthService,\n    private router: Router,\n    private userService: UserService\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    if (this.userAuthService.getToken() !== null) {\n      const role = route.data['roles'] as Array<string>;\n      console.log(role);\n\n      if (role) {\n        const match = this.userService.roleMatch(role);\n\n        if (match) {\n          return true;\n        } else {\n          this.router.navigate(['/forbidden']);\n          return false;\n        }\n      }\n    }\n\n    this.router.navigate(['/login']);\n    return false;\n  }\n}"],"mappings":";;;;AAeA,OAAM,MAAOA,SAAS;EACpBC,YACUC,eAAgC,EAChCC,MAAc,EACdC,WAAwB;IAFxB,KAAAF,eAAe,GAAfA,eAAe;IACf,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;EAClB;EAEHC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAM1B,IAAI,IAAI,CAACL,eAAe,CAACM,QAAQ,EAAE,KAAK,IAAI,EAAE;MAC5C,MAAMC,IAAI,GAAGH,KAAK,CAACI,IAAI,CAAC,OAAO,CAAkB;MACjDC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MAEjB,IAAIA,IAAI,EAAE;QACR,MAAMI,KAAK,GAAG,IAAI,CAACT,WAAW,CAACU,SAAS,CAACL,IAAI,CAAC;QAE9C,IAAII,KAAK,EAAE;UACT,OAAO,IAAI;SACZ,MAAM;UACL,IAAI,CAACV,MAAM,CAACY,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;UACpC,OAAO,KAAK;;;;IAKlB,IAAI,CAACZ,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;;AAjCWf,SAAS,C;mBAATA,SAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,eAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,WAAA;AAAA;AAATvB,SAAS,C;SAATA,SAAS;EAAAwB,OAAA,EAATxB,SAAS,CAAAyB,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}