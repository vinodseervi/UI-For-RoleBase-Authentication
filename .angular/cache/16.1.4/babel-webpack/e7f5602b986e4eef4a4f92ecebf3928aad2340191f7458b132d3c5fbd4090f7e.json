{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(httpClient, useAuthService) {\n    this.httpClient = httpClient;\n    this.useAuthService = useAuthService;\n    this.PATH_OF_API = \"http://localhost:9090\";\n    this.requestHeader = new HttpHeaders().set('No-Auth', 'True');\n  }\n  login(loginData) {\n    return this.httpClient.post(this.PATH_OF_API + \"/authenticate\", loginData, {\n      headers: this.requestHeader\n    });\n  }\n  roleMatch(allowedRoles) {\n    let isMatch = false;\n    const userRoles = this.useAuthService.getRoles();\n    if (userRoles != null && userRoles) {\n      for (let i = 0; i < userRoles.length; i++) {\n        for (let j = 0; j < allowedRoles.length; j++) {\n          if (userRoles[i].roleName == allowedRoles[j]) {\n            isMatch = true;\n            return isMatch;\n          }\n        }\n      }\n    }\n    return isMatch;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(UserService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","UserService","constructor","httpClient","useAuthService","PATH_OF_API","requestHeader","set","login","loginData","post","headers","roleMatch","allowedRoles","isMatch","userRoles","getRoles","i","length","j","roleName","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\vinod\\OneDrive\\Desktop\\Angular_Project\\jwt_ui\\src\\app\\_services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  PATH_OF_API = \"http://localhost:9090\";\n  requestHeader: HttpHeaders = new HttpHeaders().set('No-Auth', 'True');\n\n  constructor(private httpClient: HttpClient, private useAuthService : UserService) { }\n\n  public login(loginData: any) {\n    return this.httpClient.post(this.PATH_OF_API + \"/authenticate\", loginData, { headers: this.requestHeader });\n  }\n\n  public roleMatch(allowedRoles): boolean {\n    let isMatch = false;\n    const userRoles = this.useAuthService.getRoles();\n    if (userRoles != null && userRoles) {\n      for (let i = 0; i < userRoles.length; i++) {\n        for (let j = 0; j < allowedRoles.length; j++) {\n          if (userRoles[i].roleName == allowedRoles[j]) {\n            isMatch = true;\n            return isMatch;\n          }\n        }\n      }\n    }\n    return isMatch;\n  }\n  \n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,UAAsB,EAAUC,cAA4B;IAA5D,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,cAAc,GAAdA,cAAc;IAHlE,KAAAC,WAAW,GAAG,uBAAuB;IACrC,KAAAC,aAAa,GAAgB,IAAIN,WAAW,EAAE,CAACO,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC;EAEe;EAE7EC,KAAKA,CAACC,SAAc;IACzB,OAAO,IAAI,CAACN,UAAU,CAACO,IAAI,CAAC,IAAI,CAACL,WAAW,GAAG,eAAe,EAAEI,SAAS,EAAE;MAAEE,OAAO,EAAE,IAAI,CAACL;IAAa,CAAE,CAAC;EAC7G;EAEOM,SAASA,CAACC,YAAY;IAC3B,IAAIC,OAAO,GAAG,KAAK;IACnB,MAAMC,SAAS,GAAG,IAAI,CAACX,cAAc,CAACY,QAAQ,EAAE;IAChD,IAAID,SAAS,IAAI,IAAI,IAAIA,SAAS,EAAE;MAClC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;UAC5C,IAAIJ,SAAS,CAACE,CAAC,CAAC,CAACG,QAAQ,IAAIP,YAAY,CAACM,CAAC,CAAC,EAAE;YAC5CL,OAAO,GAAG,IAAI;YACd,OAAOA,OAAO;;;;;IAKtB,OAAOA,OAAO;EAChB;;AAzBWb,WAAW,C;mBAAXA,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAArB,WAAA;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}